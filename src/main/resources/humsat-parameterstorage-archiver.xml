<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-2.5.xsd
       http://camel.apache.org/schema/spring 
       http://camel.apache.org/schema/spring/camel-spring.xsd
       ">

	<!-- ### parameterstorage.simple.ARCHIVER Example ### 
	
	This example is fully working and can be used to configure Hummingbird 
	to your needs. You have to have a postgresql Database running (see the 
	'database' bean for details.)
	Instead of activemq:queue:Parameters you probably would want to
	use a topic to read your retrieved Parameters from, though...
	-->   
	
	<context:annotation-config />

	<bean id="database" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" 
		p:driverClassName="org.postgresql.Driver"
		p:url="jdbc:postgresql:hbird" 
		p:username="hbird" 
		p:password="hbird" />

	<bean id="databaseArchiver" class="org.hbird.business.parameterstorage.simple.Archiver">
		<constructor-arg index="0" ref="database" />
	</bean>

	<camelContext id="archiverContext" xmlns="http://camel.apache.org/schema/spring">

		<route>
			<from uri="activemq:topic:Parameters" />
			<setHeader headerName="name"> <simple>${body.name}</simple> </setHeader>
			<setHeader headerName="timestamp"> <simple>${body.timestamp}</simple> </setHeader>
			<marshal ref="xstream" />
			<to uri="bean:databaseArchiver" />
		</route>

	</camelContext>
</beans>



