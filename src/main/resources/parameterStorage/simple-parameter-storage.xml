<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
       http://www.springframework.org/schema/context 
       http://www.springframework.org/schema/context/spring-context-2.5.xsd
       http://camel.apache.org/schema/spring 
       http://camel.apache.org/schema/spring/camel-spring.xsd
       ">

	<!-- ### parameterstorage.simple. ARCHIVER & RETRIEVER Example ### 
	
	This example is fully working and can be used to configure Hummingbird 
	to your needs. You have to have a postgresql Database running (see the 
	'database' bean for details.)
	Instead of activemq:queue:Parameters and activemq:queue:RetrievedParameters
	you probably would want to use a topic, though...
	-->   
	
	<context:annotation-config />

<!-- 	<bean id="database" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"  -->
<!-- 		p:driverClassName="org.postgresql.Driver" -->
<!-- 		p:url="jdbc:postgresql:hbird"  -->
<!-- 		p:username="hbird"  -->
<!-- 		p:password="hbird" /> -->

	<bean id="database" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" 
		p:driverClassName="org.h2.Driver"
		p:url="jdbc:h2:parameter-storage" 
		p:username="hbird" 
		p:password="" />

	<!-- Set up the archiver bean -->
	<bean id="archiver" class="org.hbird.business.parameterstorage.simple.Archiver">
		<constructor-arg index="0" ref="database" />
	</bean>
	
	<!-- Set up the retriever bean -->
	<bean id="retriever" class="org.hbird.business.parameterstorage.simple.Retriever">
		<constructor-arg index="0" ref="database" />
		<constructor-arg index="1" value="seda:RetrievedParameters" />
	</bean>

	<camelContext id="storageContext" xmlns="http://camel.apache.org/schema/spring">
		<template id="producer" />
		<onException>
			<exception>java.io.IOException</exception>
			<handled><constant>true</constant></handled>
			<to uri="activemq:queue:RetrieverCommandsFailed" />
		</onException>

<!-- 		Archiver -->
		<route id="ps1">
			<from uri="activemq:topic:Parameters" />
			<setHeader headerName="name"> <simple>${body.name}</simple> </setHeader>
			<setHeader headerName="timestamp"> <simple>${body.timestamp}</simple> </setHeader>
			<marshal ref="xstream" />
			<to uri="bean:archiver" />
		</route>
		
<!-- 		Retriever -->
		
		<route id="ps2">
			<from uri="activemq:queue:RetrieverCommands" />
			<to uri="bean:retriever" />
		</route>
		
		<route id="ps3">
			<from uri="seda:RetrievedParameters" />
			<unmarshal ref="xstream" />
			<to uri="activemq:queue:RetrievedParameters" />
		</route>

	</camelContext>
</beans>



