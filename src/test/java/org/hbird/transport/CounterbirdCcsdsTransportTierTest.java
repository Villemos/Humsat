/**
 * Licensed under the Apache License, Version 2.0. You may obtain a copy of 
 * the License at http://www.apache.org/licenses/LICENSE-2.0 or at this project's root.
 */

package org.hbird.transport;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.HashMap;
import java.util.Map;

import org.apache.camel.CamelContext;
import org.apache.camel.EndpointInject;
import org.apache.camel.Exchange;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.log4j.Logger;
import org.hbird.business.simulator.SimulatorSSM;
import org.hbird.business.simulator.waveforms.FlatWaveform;
import org.hbird.business.simulator.waveforms.Waveform;
import org.hbird.exchange.type.Parameter;
import org.hbird.transport.protocols.ccsds.transferframe.encoder.CcsdsFrameEncoder;
import org.hbird.transport.xtce.XtceModelFactory;
import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.AbstractJUnit4SpringContextTests;

/**
 *  counterbird ccsdss transport tier integration test.
 * 
 * The integration test will use the SimulatorSSM to create frames that can be
 * processed by the counterbird-ccsds-transport-tier. The Simulator itself
 * creates a message containing a Byte array with the generated value. This
 * value is being encoded by the CcsdsFrameEncoder and then send to the activemq
 * queue 'frames'. From there on, the counterbird-ccsds-transport-tier takes
 * over.
 * 
 */
@ContextConfiguration(locations = { "file:src/main/resources/humsat-counterbird-ccsds-transport-tier.xml" })
public class CounterbirdCcsdsTransportTierTest extends AbstractJUnit4SpringContextTests {
	protected static Logger logger = Logger.getLogger(CounterbirdCcsdsTransportTierTest.class);

	protected static boolean thisIsTheFirstRun = true;

	protected SimulatorSSM simulator = null;

	@Autowired
	protected CamelContext counterbirdTransportTierContext = null;

	@Produce(uri = "seda:simMessages")
	protected ProducerTemplate producer = null;

	@EndpointInject(uri = "mock:Results")
	protected MockEndpoint results = null;

	/**
	 * Instantiate the simulator, add routes necessary to test 
	 * Humsat and delete old messages from activemq. 
	 * 
	 * @throws Exception
	 */
	@Before
	public void initialize() throws Exception {
		// Check if the initialization has been run already. Between the tests,
		// the Camel context stays the same, so routes may not be added during
		// initialization phase of further tests.
		if (thisIsTheFirstRun) {

			// Add routes that are necessary to run the tests. 
			counterbirdTransportTierContext.addRoutes(new RouteBuilder() {
				public void configure() throws Exception {
					// Route that will process encode the values generated by 
					// the simulator.
					from("seda:simMessages").split()
							.method(new CcsdsFrameEncoder(256))
							.to("activemq:frames");
					// Route to access the parameters given out by the transport
					// tier.
					from("activemq:topic:Parameters").to("mock:Results");
				}
			});

			thisIsTheFirstRun = false;
		}

		// Create a new simulator. It will not be used for proper simulation,
		// but to generate the values needed for the integration test. 
		// The simulator's output will then be 'decoded' via Humsat's transport
		// tier.
		XtceModelFactory factory = new XtceModelFactory("src/data/cubesat.xml");
		simulator = new SimulatorSSM(factory, "TMPacket");

		// The producer was not situated in a camel context during instantiation, 
		// so the producer does not work and has to be substituted.
		simulator.setTemplate(producer);

		// In case that there are still old parameters left in the parameters
		// topic, wait until all have been routed to the 'result' endpoint, 
		// so that they don't disturb the testing.
		int oldCount = -1;
		int newCount = 0;

		while (oldCount < newCount) {
			Thread.sleep(250);
			oldCount = newCount;
			newCount = results.getReceivedCounter();
		}

		// Reset Mock endpoint so that it doesn't contain any messages.
		results.reset();
	}

	/**
	 * Tests the decoding of a packet containing position information.
	 * 
	 * @throws InterruptedException
	 */
	@Test
	public void testPositionPacket() throws InterruptedException {
		double elevation = 20;
		int longitude = 40;
		int latitude = 60;
		
		// 'Simulate' a packet with the cubesat's position. 
		Map<String, Waveform> test = new HashMap<String, Waveform>();
		test.put("CUBESAT_APID", new FlatWaveform(111));
		test.put("PACKET_LENGTH", new FlatWaveform(96));
		test.put("ELEVATION", new FlatWaveform(elevation));
		test.put("LONGITUDE", new FlatWaveform(longitude));
		test.put("LATITUDE", new FlatWaveform(latitude));

		simulator.setWaveformMap(test);
		simulator.generateMessage();

		//Wait max ~8sec until 3 messages have been received.
		for (int i = 4; results.getReceivedCounter() < 3 && i < 8192; i *= 2) {
			Thread.sleep(i);
		}

		assertEquals("Received wrong number of messages.", 3, results.getReceivedCounter());

		// Put the received parameters into a map since the order in which they
		// were received could differ.
		Map<String,Parameter> receivedTelemetry = new HashMap<String,Parameter>();
		for (Exchange e : results.getReceivedExchanges()) {
			receivedTelemetry.put(e.getIn().getBody(Parameter.class).getName(), e.getIn().getBody(Parameter.class));
		}
		
		// Assert correctness of the received parameters.
		assertTrue("No ELEVATION Parameter has been received.", receivedTelemetry.containsKey("ELEVATION"));
		assertEquals("ELEVATION parameter has wrong value.", elevation, receivedTelemetry.get("ELEVATION").getValue());
		assertTrue("No LONGITUDE Parameter has been received.", receivedTelemetry.containsKey("LONGITUDE"));
		assertEquals("LONGITUDE parameter has wrong value.", longitude, receivedTelemetry.get("LONGITUDE").getValue());
		assertTrue("No LATITUDE Parameter has been received.", receivedTelemetry.containsKey("LATITUDE"));
		assertEquals("LATITUDE parameter has wrong value.", latitude, receivedTelemetry.get("LATITUDE").getValue());
	}

	/**
 	 * Tests the decoding of a packet containing the payload.
	 * 
	 * @throws InterruptedException
	 */
	@Test
	public void testPayloadPacket() throws InterruptedException {
		boolean stateOfVideoStream = false;
		boolean stateOfPayload = true;
		
		// 'Simulate' a packet with the cubesat's payload.
		Map<String, Waveform> test = new HashMap<String, Waveform>();
		test.put("CUBESAT_APID", new FlatWaveform(333));
		test.put("PACKET_LENGTH", new FlatWaveform(2));
		test.put("STATE_OF_VIDEO_STREAM", new FlatWaveform(
				stateOfVideoStream == true ? 1 : 0));
		test.put("STATE_OF_PAYLOAD", new FlatWaveform(
				stateOfPayload == true ? 1 : 0));

		simulator.setWaveformMap(test);
		simulator.generateMessage();
		
		//Wait max ~8sec until 2 messages have been received.
		for (int i = 4; results.getReceivedCounter() < 2 && i < 8192; i *= 2) {
			Thread.sleep(i);
		}
		
		assertEquals("Received wrong number of messages.", 2, results.getReceivedCounter());

		// Put the received parameters into a map since the order in which they
		// were received could differ.
		Map<String,Parameter> receivedTelemetry = new HashMap<String,Parameter>();
		for (Exchange e : results.getReceivedExchanges()) {
			receivedTelemetry.put(e.getIn().getBody(Parameter.class).getName(), e.getIn().getBody(Parameter.class));
		}

		// Assert correctness of the received parameters.
		assertTrue("No STATE_OF_VIDEO_STREAM Parameter has been received.", receivedTelemetry.containsKey("STATE_OF_VIDEO_STREAM"));
		assertEquals("STATE_OF_VIDEO_STREAM parameter has wrong value.", stateOfVideoStream == true ? 1 : 0, receivedTelemetry.get("STATE_OF_VIDEO_STREAM").getValue());
		assertTrue("No STATE_OF_PAYLOAD Parameter has been received.", receivedTelemetry.containsKey("STATE_OF_PAYLOAD"));
		assertEquals("STATE_OF_PAYLOAD parameter has wrong value.", stateOfPayload == true ? 1 : 0, receivedTelemetry.get("STATE_OF_PAYLOAD").getValue());
	}
	
	/**
	 * Tests the decoding of a packet containing telemetry data.
	 * 
	 * @throws InterruptedException
	 */
	@Test
	public void testTelemetryPacket() throws InterruptedException {
		int onboardTime = 10000;
		double cpuTemperature = 25;
		double batteryVoltage = 12;
		
		// 'Simulate' a packet with the cubesat's telemetry.
		Map<String, Waveform> test = new HashMap<String, Waveform>();
		test.put("CUBESAT_APID", new FlatWaveform(222));
		test.put("PACKET_LENGTH", new FlatWaveform(160));
		test.put("ONBOARD_TIME", new FlatWaveform(onboardTime));
		test.put("CPU_TEMPERATURE", new FlatWaveform(cpuTemperature));
		test.put("BATTERY_VOLTAGE", new FlatWaveform(batteryVoltage));

		simulator.setWaveformMap(test);
		simulator.generateMessage();
		
		//Wait max ~8sec until 3 messages have been received.
		for (int i = 4; results.getReceivedCounter() < 3 && i < 8192; i *= 2) {
			Thread.sleep(i);
		}
		
		assertEquals("Received wrong number of messages.", 3, results.getReceivedCounter());

		// Put the received parameters into a map since the order in which they
		// were received could differ.
		Map<String,Parameter> receivedTelemetry = new HashMap<String,Parameter>();
		for (Exchange e : results.getReceivedExchanges()) {
			receivedTelemetry.put(e.getIn().getBody(Parameter.class).getName(), e.getIn().getBody(Parameter.class));
		}

		// Assert correctness of the received parameters.
		assertTrue("No ONBOARD_TIME Parameter has been received.", receivedTelemetry.containsKey("ONBOARD_TIME"));
		assertEquals("ONBOARD_TIME parameter has wrong value.", onboardTime, receivedTelemetry.get("ONBOARD_TIME").getValue());
		assertTrue("No CPU_TEMPERATURE Parameter has been received.", receivedTelemetry.containsKey("CPU_TEMPERATURE"));
		assertEquals("CPU_TEMPERATURE parameter has wrong value.", cpuTemperature, receivedTelemetry.get("CPU_TEMPERATURE").getValue());
		assertTrue("No BATTERY_VOLTAGE Parameter has been received.", receivedTelemetry.containsKey("BATTERY_VOLTAGE"));
		assertEquals("BATTERY_VOLTAGE parameter has wrong value.", batteryVoltage, receivedTelemetry.get("BATTERY_VOLTAGE").getValue());

	}

	@Ignore
	@After
	public void tearDown() {
	}
}
